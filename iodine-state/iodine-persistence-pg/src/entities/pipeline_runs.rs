//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::PipelineRunStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "pipeline_runs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub definition_id: Uuid,
    pub status: PipelineRunStatus,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub run_config: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub tags: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub trigger_info: Option<Json>,
    pub start_time: Option<DateTimeWithTimeZone>,
    pub end_time: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_log::Entity")]
    EventLog,
    #[sea_orm(
        belongs_to = "super::pipeline_definitions::Entity",
        from = "Column::DefinitionId",
        to = "super::pipeline_definitions::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PipelineDefinitions,
    #[sea_orm(has_many = "super::task_instances::Entity")]
    TaskInstances,
}

impl Related<super::event_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventLog.def()
    }
}

impl Related<super::pipeline_definitions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineDefinitions.def()
    }
}

impl Related<super::task_instances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskInstances.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "event_log")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub event_id: i64,
    pub timestamp: DateTimeWithTimeZone,
    pub run_id: Option<Uuid>,
    pub task_id: Option<Uuid>,
    #[sea_orm(column_type = "Text")]
    pub event_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub message: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::pipeline_runs::Entity",
        from = "Column::RunId",
        to = "super::pipeline_runs::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PipelineRuns,
}

impl Related<super::pipeline_runs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineRuns.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "pipeline_definitions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub run_config: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pipeline_runs::Entity")]
    PipelineRuns,
    #[sea_orm(has_many = "super::task_definitions::Entity")]
    TaskDefinitions,
}

impl Related<super::pipeline_runs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineRuns.def()
    }
}

impl Related<super::task_definitions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskDefinitions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
